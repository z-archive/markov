#!/bin/bash

set -eu

function print_usage ()
{
    exit_code=$1
    name=$(basename $0)
    echo "Usage:
    $name prepare
    $name configure <extra cmake options>
    $name make <extra make options>
    $name test

  prepare - install required for build packages (Ubuntu 12.04)
  configure - prepare source code for build
  make - build source code
  test - run unit-tests
"
    exit ${exit_code}
}

# path to checkout
path_root=$(readlink -f $(dirname $0))

# path to third-party
path_third_party=${path_root}/third-party

# path to build directory
path_stage=${path_root}/stage

# path to test directory
path_test=${path_root}/test

# path to source code
path_source=${path_root}/src

export VERBOSE=${VERBOSE-}

function exec_path ()
{
    kind=$1
    name=$2
    case $kind in
	"binary")
	    echo ${path_stage}/$name/$name
	    ;;
	"link")
	    echo ${path_root}/$name
	    ;;
	*)
	    echo "internal error" 1>&2
	    exit 1
	    ;;
    esac
}

binary_names="learn generate"

# prepare platform for build
function prepare ()
{
    # required for download & extract boost.process
    sudo apt-get update
    sudo apt-get install -y wget unzip

    # re-create third-party
    rm -rf ${path_third_party}/boost

    # download & extract boost.process
    tmp_third_party=$(mktemp -d /tmp/markov.build.XXX)
    pushd ${tmp_third_party}
      wget http://www.highscore.de/boost/process.zip
      unzip -q process.zip
      mv boost ${path_third_party}
    popd 
    rm -rf ${tmp_third_party}

    # patch boost.process
    pushd ${path_third_party}/boost
    patch -p1 < ../boost.process.patch
    popd 

    # install dependencies
    sudo apt-get install -y build-essential cmake unzip libboost-thread1.48-dev libboost-program-options1.48-dev libboost-system1.48-dev libboost-serialization1.48-dev

    # required for boost.process
    sudo apt-get install -y libboost-filesystem1.48-dev

    # required for g++ 4.7 (c++11 extension)
    sudo apt-get install -y python-software-properties
    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    sudo apt-get update
    sudo apt-get -y install gcc-4.7 g++-4.7
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.6
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.7
}

# remove links from checkout
function remove_links ()
{
    local name
    for name in ${binary_names}; do
	rm -f $(exec_path link $name)
    done
}

# create links from stage to checkout
function create_links ()
{
    local name
    for name in ${binary_names}; do
	if [ -f $(exec_path binary $name) ]; then
	    ln $(exec_path binary $name) $(exec_path link $name)
	fi
    done
}

function clean ()
{
    rm -rf ${path_stage}
    remove_links
}

if [ $# -lt 1 ]; then
    print_usage 0
fi

action=${1}
shift

case $action in
    "prepare")
	prepare
	;;
    "configure")
	# clean everything
	clean

	# generate makefiles
	mkdir ${path_stage}
	pushd ${path_stage}
	    cmake ${path_source} -DCMAKE_CXX_COMPILER=g++-4.7 $@
	popd
	;;
    "make")
	remove_links

	pushd ${path_stage}
	    make $@
	popd

	create_links
	;;
    "test")
	pushd ${path_test}
	  ./simple
	popd 
	;;
    "clean")
	clean
	;;
    "-h"|"--help")
	print_usage 0
	;;
    *)
	echo "Unknow action $1" 1>&2
	print_usage 1
	;;
esac
